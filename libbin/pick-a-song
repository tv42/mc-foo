#!/usr/bin/perl -w
use strict;
use CDB_File;

use vars qw($MCFOOHOME $MCFOODATA $MCFOOCACHE);

$MCFOOHOME=$ENV{MCFOOHOME} || '/usr/lib/mc-foo';
$MCFOODATA=$ENV{MCFOODATA} || '/var/lib/mc-foo';
$MCFOOCACHE=$ENV{MCFOOCACHE} || '/var/cache/mc-foo';

my $DEFAULT_SCORE=100; # everything starts with 100 points.

sub usage() {
  warn("pick-a-song: usage:\n",
       "  pick-a-song [how-many-songs]\n");
  exit(1);
}

sub fail(@) { die "pick-a-song: @_\n" }

sub dir(&$) {
        my ($grep) = shift;
        return () unless defined $grep;
        my ($dir) = shift;
        return () unless defined $dir;
        opendir DIR, $dir
          or warn("pick-a-song: Cannot open dir $dir\n"),
          return ();
        my (@r) = sort grep {!/^\./} readdir DIR;
        closedir DIR;
        return grep { &$grep } @r;
}

sub get_medias() {
  my @backends=dir {1} "$MCFOODATA/media";
  my @medias;
  foreach my $backend (@backends) {
    push @medias, map {"$backend/$_"}
      dir {1} "$MCFOODATA/media/$backend"; #TODO filter only ones with current etc
  }
  return @medias;
}

sub openweight($;) {
  my ($profilename) = @_;
  my %weight;
  tie %weight, 'CDB_File', "$MCFOOCACHE/weights/$profilename.cdb"
    or return undef;
  return \%weight;
}

sub openmediaprofile($;) {
  my ($media) = @_;
  my %med;
  tie %med, 'CDB_File', "$MCFOOCACHE/mediaprofiles/$media.cdb"
    or return undef;
  return \%med;
}

sub freshen($$@) {
  my ($old) = shift;
  return undef if defined $old and ref $old ne 'HASH';
  my ($sub) = shift;
  defined $sub and ref $sub eq 'CODE'
    or return undef;
  my $new={};

  for (@_) {
    if (exists $old->{$_}) {
      $new->{$_} = $old->{$_};
    } else {
      $new->{$_} = $sub->($_)
        or delete $new->{$_};
    }
  }
  return $new;
}

sub songname($$;) {
  my ($media, $num) = @_;
  my %m;
  tie %m, 'CDB_File', "$MCFOODATA/media/$media/current"
    or fail "Cannot open $MCFOODATA/media/$media/current: $!";
  exists $m{$num} or return undef;
  return $m{$num};
}


{
  my $mediaprofs={};

  sub suggestions($;) {
    my ($profiles) = @_;
    my @medias=get_medias() or return undef;
    $mediaprofs=freshen($mediaprofs, \&openmediaprofile, @medias);
    %$mediaprofs or fail "No medias";

    my $weights=0;
    for my $med (@medias) {
      for my $prof (keys %$profiles) {
        $weights+=$profiles->{$prof}->{$med}
          if exists $profiles->{$prof}->{$med};
      }
    }
    if ($weights==0) {
      # profiles assigned no weights, so take the sum of the number
      # of songs in all medias, as counted by the mediaprofiles.
      foreach (keys %$mediaprofs) {
        $weights+=$mediaprofs->{$_}->{n} * $DEFAULT_SCORE;
      }
    }
    my $rand = rand($weights);

    my ($selected_media, $selected_media_name);
  out: for my $med (@medias) {
      $selected_media_name=$med;
      $selected_media=$mediaprofs->{$med};
      if (keys %$profiles) {
        for my $prof (keys %$profiles) {
          last out if $rand <= $profiles->{$prof}->{$med};
          $rand-=$profiles->{$prof}->{$med};
        }
      } else {
        last out if $rand <= $selected_media->{n} * $DEFAULT_SCORE;
        $rand-=$selected_media->{n} * $DEFAULT_SCORE;
      }
    }

    my $n=1;
    my $max=$selected_media->{n};
    while ($n<=$max) {
      my $points = $DEFAULT_SCORE;
      for (keys %$profiles) {
        $points+=$selected_media->{"$_:$n"}
          if exists $selected_media->{"$_:$n"};            
      }
      if ($points>0) {
        if ($rand <= $points) {
          return [split('/', $selected_media_name, 2),
                  songname($selected_media_name, $n)];
        }
        $rand-=$points;
      }
      $n++;
    }
    # Err. Something was off in the rand if we get here.
    fail "Bad things in suggestions; $rand";
  }
}

sub main($) {
  my ($num) = shift;
  my ($profiles);
  $|=1;
  while (<STDIN>) {
    $profiles=freshen($profiles, \&openweight, split ' ');
    for(1..$num) {
      my $tmp=suggestions($profiles)
        or fail "suggestions failed";
      print join(' ', @$tmp), "\n";
    }
  }
}

usage() if @ARGV>1;
my $num = $ARGV[0] || 10;
$num =~ /^\d+$/ or usage();
main($num);
