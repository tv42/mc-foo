#!/usr/bin/env python
import sys
sys.path.append('/usr/lib/mc-foo/lib/python')

import McFoo.playqueue
import McFoo.dj
import McFoo.inputsong
import McFoo.volume
import McFoo.server.xrpc
import asyncore
import select
import os

from errno import EINTR

def poll (rpcserver, inputsong, pipe_read, timeout=None):
    (r,w,e) = rpcserver.activeFds()
    r.append(pipe_read)
    e_append = [pipe_read]
    if inputsong.readable():
        r.append(inputsong)
        e_append = [inputsong]
    if inputsong.writable():
        w.append(inputsong)
        e_append = [inputsong]
    e.extend(e_append)

    try:
        (r,w,e) = select.select (r,w,e, timeout)
    except select.error, (errno, strerror):
        if errno==EINTR:
            return
        else:
            raise

    for x in filter(lambda x: isinstance(x, asyncore.dispatcher), e):
        try:
            x.handle_expt_event()
        except:
            x.handle_error (sys.exc_type, sys.exc_value, sys.exc_traceback)
    for x in filter(lambda x: isinstance(x, asyncore.dispatcher), r):
        try:
            x.handle_read_event()
        except:
            x.handle_error (sys.exc_type, sys.exc_value, sys.exc_traceback)
    for x in filter(lambda x: isinstance(x, asyncore.dispatcher), w):
        try:
            x.handle_write_event()
        except:
            x.handle_error (sys.exc_type, sys.exc_value, sys.exc_traceback)
    rpcserver.work(0.0)

def main():
    playqueue = McFoo.playqueue.PlayQueue()
    (pipe_r, pipe_w) = os.pipe()
    dj = McFoo.dj.Dj(pipe_w)
    inputsong = McFoo.inputsong.InputSong(playqueue)
    volume = McFoo.volume.VolumeControl()

    XMLRPC = McFoo.server.xrpc.server(dj, playqueue, volume)
    XMLRPC.start_listen()

    while 1:
        if dj.isdone():
            next = playqueue.pop()
            if next==None:
                pass
            else:
                dj.set_next(next)

        if len(playqueue) < 100:
            inputsong.wakeup()
            poll(XMLRPC, inputsong, pipe_r, 0.01)
        else:
            poll(XMLRPC, inputsong, pipe_r, 10.0)

        if McFoo.server.xrpc.stop:
            break

    XMLRPC.close()


if __name__ == "__main__":
    main()
